type Comment {
    created_at: DateTime
    id: ID!
    post_id: ID
    text: String
    username: String
}

type Community {
    created_at: DateTime
    id: ID!
    topic: String
}

type Post {
    body: String
    community_id: ID
    created_at: DateTime
    id: ID!
    image: String
    title: String
    username: String
    votes: [Vote]
        @materializer(
            query: "getVotesByPostId"
            arguments: [{ name: "post_id", field: "id" }]
        )
    comments: [Comment]
        @materializer(
            query: "getCommentByPostId"
            arguments: [{ name: "post_id", field: "id" }]
        )
    community: [Community]
        @materializer(
            query: "getCommunityListById"
            arguments: [{ name: "id", field: "community_id" }]
        )
}

type Vote {
    created_at: DateTime
    id: ID!
    post_id: ID
    upvote: Boolean
    username: String
}

type Query {
    getCommentList: [Comment]
        @dbquery(
            type: "postgresql"
            table: "comment"
            configuration: "postgresql_config"
        )
    """
    This query is an example of how to simply paginate your responses.
    """
    getPaginatedCommentList(first: Int!, after: Int!): [Comment]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "comment" limit $1 offset $2
            """
            configuration: "postgresql_config"
        )
    """
    In this example, a single query parameter is passed. If the request to the DB will
    return at most one value you can remove the square brackets from the result.
    """
    getCommentByPost_id(post_id: ID!): [Comment]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "comment" where "post_id" = $1
            """
            configuration: "postgresql_config"
        )
    """
    In this example, two query parameters are passed. If the request to the DB will
    return at most one value you can remove the square brackets from the result.
    """
    getCommentByPost_idAndUsername(post_id: ID!, username: String!): [Comment]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "comment" where "post_id" = $1 and "username" = $2
            """
            configuration: "postgresql_config"
        )
    getCommunityList: [Community]
        @dbquery(
            type: "postgresql"
            table: "community"
            configuration: "postgresql_config"
        )
    getCommunityListByTopic(topic: String!): [Community]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "community" where "topic" =$1
            """
            configuration: "postgresql_config"
        )
    getCommunityListById(id: ID!): [Community]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "community" where "id" =$1
            """
            configuration: "postgresql_config"
        )

    getCommunityListByLimit(limit: Int!): [Community]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "community" order by "created_at" desc
            limit $1
            """
            configuration: "postgresql_config"
        )

    getPostList: [Post]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "post"
            order by "post"."created_at" desc
            """
            configuration: "postgresql_config"
        )

    getPostListByPostId(post_id: ID!): Post
        @dbquery(
            type: "postgresql"
            query: """
            select * from "post"
            where "post"."id" = $1
            """
            configuration: "postgresql_config"
        )

    getPostListByTopic(topic: String!): [Post]
        @dbquery(
            type: "postgresql"
            query: """
            select *, "post".id as id from "post"
            join "community" on "community"."id" = "post"."community_id"
            where "community"."topic" = $1
            order by "post"."created_at" desc
            """
            configuration: "postgresql_config"
        )

    getVoteList: [Vote]
        @dbquery(
            type: "postgresql"
            table: "vote"
            configuration: "postgresql_config"
        )
    getVotesByPostId(post_id: ID!): [Vote]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "vote" where "post_id" =$1
            order by "created_at" desc
            """
            configuration: "postgresql_config"
        )
    getCommentByPostId(post_id: ID!): [Comment]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "comment" where "post_id" = $1
            """
            configuration: "postgresql_config"
        )
}

type Mutation {
    """
    In this mutation example you can see how to do a mutation to insert data in the database.
    """
    insertPost(
        image: String!
        community_id: ID!
        body: String!
        title: String!
        username: String!
    ): Post
        @dbquery(
            type: "postgresql"
            table: "post"
            dml: INSERT
            configuration: "postgresql_config"
        )

    insertCommunity(topic: String!): Community
        @dbquery(
            type: "postgresql"
            table: "community"
            dml: INSERT
            configuration: "postgresql_config"
        )
    insertComment(post_id: ID!, username: String!, text: String!): Comment
        @dbquery(
            type: "postgresql"
            table: "comment"
            dml: INSERT
            configuration: "postgresql_config"
        )

    insertVote(post_id: ID!, username: String!, upvote: Boolean!): Vote
        @dbquery(
            type: "postgresql"
            table: "vote"
            dml: INSERT
            configuration: "postgresql_config"
        )

    """
    In this mutation example you can see how to do a mutation to delete data from the database.
    """
    deleteComments(post_id: ID!): Comment
        @dbquery(
            type: "postgresql"
            table: "comment"
            dml: DELETE
            configuration: "postgresql_config"
        )

    deleteVotes(post_id: ID!): Vote
        @dbquery(
            type: "postgresql"
            table: "vote"
            dml: DELETE
            configuration: "postgresql_config"
        )

    deletePost(id: ID!): Post
        @dbquery(
            type: "postgresql"
            table: "post"
            dml: DELETE
            configuration: "postgresql_config"
        )
}
